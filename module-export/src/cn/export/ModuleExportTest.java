package cn.export;

/**
 * @author lele
 * @version 1.0
 * @Description 谈到 Java 9 大家往往第一个想到的就是 Jigsaw （拼图玩具）项目
 * 众所周知， Java 已经发展超过 20 年（95 年最初发布）， Java 和相关生态在不断丰富的同时也越来越暴露出一些问题
 * Java 运行环境的膨胀和臃肿。 每次JVM启动的时候，至少会有30～60MB的内存加载，主要原因是JVM需要加载rt.jar
 * 不管其中的类是否被classloader加载，第一步整个jar都会被JVM加载到内存当中去（而模块化可以根据模块的需要加载程序运行需要的class）
 * <p>
 * 当代码库越来越大，创建复杂，盘根错节的“意大利面条式代码”的几率呈指数级的增长
 * 不同版本的类库交叉依赖导致让人头疼的问题，这些都阻碍了 Java 开发和运行效率的提升
 * 很难真正地对代码进行封装, 而系统并没有对不同部分（也就是 JAR 文件）之间的依赖关系有个明确的概念
 * 每一个公共类都可以被类路径之下任何其它的公共类所访问到，这样就会导致无意中使用了并不想被公开访问的API
 * <p>
 * 本质上讲也就是说， 用模块来管理各个package，通过声明某个package暴露
 * 模块(module)的概念，其实就是package外再裹一层， 不声明默认就是隐藏。因此，模块化使得代码组织上更安全，因为它可以指定哪些部分可以暴露，哪些部分隐藏
 * <p>
 * 实现目标
 * 模块化的主要目的在于减少内存的开销
 * 只须必要模块，而非全部jdk模块，可简化各种类库和大型应用的开发和维护
 * 改进 Java SE 平台，使其可以适应不同大小的计算设备
 * 改进其安全性，可维护性，提高性能
 * @Email 414955507@qq.com
 * @date 2019/10/21 22:33
 */
public class ModuleExportTest {
    public void test() {
        System.out.println("Module1 test out.....");
    }
}
